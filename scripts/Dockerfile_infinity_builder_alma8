# NOTICE: This Dockerfile depends on BuildKit
# NOTICE: You should prepare the following files
# NOTICE: You can use the download_deps_infinity_builder_centos7.sh script to download them
# bison-3.8.2.tar.xz
# binutils-2.41.tar.xz
# gcc-13.2.0.tar.xz
# cmake-3.30.0-linux-x86_64.tar.gz
# ninja-linux.zip
# llvm-project-18.1.8.src.tar.xz
# boost_1_85_0.tar.bz2
# flex-2.6.4.tar.gz
# libevent-2.1.12-stable.tar.gz
# lz4-1.9.4.tar.gz
# jemalloc-5.3.0.tar.bz2
# gperftools-2.15.tar.gz
# openssl-1.1.1w.tar.gz
# Python-3.12.4.tar.xz

# https://github.com/pypa/manylinux
# The manylinux project supports: manylinux2014, manylinux_2_28, musllinux_1_1, musllinux_1_2
# We need build a wheel for each supported Python minor version. Refers to https://github.com/wjakob/nanobind/pull/561.
FROM quay.io/pypa/manylinux_2_28_x86_64:2023-09-17-ae90a16

ENV AUDITWHEEL_PLAT manylinux_2_28_$AUDITWHEEL_ARCH

RUN rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux \
    && yum update -y \
    && yum install -y gettext-devel openssl-devel libevent-devel zlib-devel lz4-devel xz-devel bzip2-devel libuuid-devel readline-devel \
    && yum install -y binutils git wget vim libtool tree rpm-build postgresql \
    && yum clean all \
    && echo '/usr/local/lib' >> /etc/ld.so.conf.d/local.conf \
    && echo '/usr/local/lib64' >> /etc/ld.so.conf.d/local.conf

# Install cmake 3.28+ and ninja
RUN pipx upgrade cmake --index-url https://pypi.tuna.tsinghua.edu.cn/simple \
    && pipx install ninja --index-url https://pypi.tuna.tsinghua.edu.cn/simple

# Install clang-18.1.8
# Add -DCLANG_DEFAULT_LINKER=lld to use lld by default
# infinity seems to be incompatible with the lld linker
# https://github.com/llvm/llvm-project/issues/96210
# https://github.com/llvm/llvm-project/issues/57276
RUN --mount=type=bind,source=llvm-project-18.1.8.src.tar.xz,target=/root/llvm-project-18.1.8.src.tar.xz \
    cd /root && tar xf llvm-project-18.1.8.src.tar.xz \
    && cd llvm-project-18.1.8.src && mkdir build && cd build \
    && cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_JOB_POOLS:STRING="link=3" \
        -DCMAKE_CXX_FLAGS="-fexceptions" \
        -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb" \
        -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
        -DLLVM_TARGETS_TO_BUILD=X86 ../llvm \
    && ninja install/strip \
    && cp /usr/local/include/x86_64-unknown-linux-gnu/c++/v1/__config_site /usr/local/include/c++/v1 \
    && ldconfig && cd /root && rm -rf llvm-project-18.1.8.src

RUN yum install -y flex

# Install boost-1.85.0
RUN --mount=type=bind,source=boost_1_85_0.tar.bz2,target=/root/boost_1_85_0.tar.bz2 \
    cd /root && tar xf boost_1_85_0.tar.bz2 \
    && cd boost_1_85_0 && ./bootstrap.sh --with-python=python3.10 \
    && ./b2 -j12 install \
    && ldconfig && cd /root && rm -rf boost_1_85_0

# Install thrift 0.20.0
RUN --mount=type=bind,source=thrift-0.20.0.tar.gz,target=/root/thrift-0.20.0.tar.gz  \
    cd /root && tar xzf thrift-0.20.0.tar.gz \
    && cd thrift-0.20.0/build && cmake -G Ninja .. && ninja thrift-compiler \
    && cp compiler/cpp/bin/thrift /usr/local/bin/thrift \
    && cd /root && rm -rf thrift-0.20.0

# Install jemalloc-5.3.0
# Known issue: Composition of `-fsanitize=address`, staticly linked jemalloc and `mallctl` cause crash at initialization.
# Refers to https://github.com/jemalloc/jemalloc/issues/2454
RUN --mount=type=bind,source=jemalloc-5.3.0.tar.bz2,target=/root/jemalloc-5.3.0.tar.bz2  \
    cd /root && tar xjf jemalloc-5.3.0.tar.bz2 \
    && cd jemalloc-5.3.0 && CFLAGS="-fPIE" CXXFLAGS="-fPIE" ./configure --enable-static --disable-libdl --enable-prof --enable-prof-libunwind && make -j install \
    && ldconfig && cd /root && rm -rf jemalloc-5.3.0

# Install gperftools-2.15
RUN --mount=type=bind,source=gperftools-2.15.tar.gz,target=/root/gperftools-2.15.tar.gz  \
    cd /root && tar xzf gperftools-2.15.tar.gz \
    && cd gperftools-2.15 && ./configure && make -j 8 && make install \
    && ldconfig && cd /root && rm -rf gperftools-2.15

# download https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.20.2/sqllogictest-bin-v0.20.2-x86_64-unknown-linux-musl.tar.gz
RUN --mount=type=bind,source=sqllogictest-bin-v0.20.2-x86_64-unknown-linux-musl.tar.gz,target=/root/sqllogictest-bin-v0.20.2-x86_64-unknown-linux-musl.tar.gz \
    cd /tmp && tar xzf /root/sqllogictest-bin-v0.20.2-x86_64-unknown-linux-musl.tar.gz && cp -rf sqllogictest /usr/local/bin && rm -fr /tmp/*

RUN /usr/local/bin/python3.10 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/

# Install tools for building and uploading a python wheel.
RUN pipx install twine

# Create a python virtual environment for each python version. Set PATH so that the shell activate a virtual environment automatically when entering a container from this image.
RUN --mount=type=bind,source=python/requirements.txt,target=/root/requirements.txt /usr/local/bin/python3.10 -m venv /usr/local/venv310 && source /usr/local/venv310/bin/activate && pip3 install --no-input wheel && pip3 install --no-input -r /root/requirements.txt

RUN --mount=type=bind,source=python/requirements.txt,target=/root/requirements.txt /usr/local/bin/python3.11 -m venv /usr/local/venv311 && source /usr/local/venv311/bin/activate && pip3 install --no-input wheel && pip3 install --no-input -r /root/requirements.txt

RUN --mount=type=bind,source=python/requirements.txt,target=/root/requirements.txt /usr/local/bin/python3.12 -m venv /usr/local/venv312 && source /usr/local/venv312/bin/activate && pip3 install --no-input wheel && pip3 install --no-input -r /root/requirements.txt

ENV PATH="/usr/local/venv310/bin:$PATH"

ENV CC=clang CXX=clang++

ENTRYPOINT [ "bash", "-c", "while true; do sleep 60; done"]
